{"version":3,"file":"task.js","sourceRoot":"","sources":["../../controllers/task.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from 'express'\nimport Task from '../models/Task'\nimport SubTask from '../models/SubTask'\n\nexport const createTask = async (req: Request, res: Response) => {\n   const { title, completed } = req.body\n\n   const newTask = new Task({ title, completed })\n\n   try {\n      await newTask.save()\n      res.status(201).json(newTask)\n   } catch (error) {\n      res.status(409).json({ message: error.message })\n   }\n}\n\nexport const getTasks = async (_req: Request, res: Response) => {\n   try {\n      const tasks = await Task.find({}).populate({ path: 'subTask' })\n\n      res.status(200).json(tasks)\n   } catch (error) {\n      res.status(404).json({ message: error.message })\n   }\n}\n\nexport const updateTask = async (req: Request, res: Response) => {\n   const updates = Object.keys(req.body)\n   const allowUpdates = ['title', 'completed']\n   const isValidoperation = updates.every((update) => allowUpdates.includes(update))\n\n   if (!isValidoperation) {\n      res.status(400).json({ error: 'Invalid updates!' })\n   } else {\n      try {\n         const task = await Task.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true })\n\n         if (!task) {\n            res.status(404).json()\n         } else {\n            res.status(201).json(task)\n         }\n      } catch (error) {\n         res.status(400).json({ message: error.message })\n      }\n   }\n}\n\nexport const deleteTask = async (req: Request, res: Response) => {\n   try {\n      const task = await Task.findByIdAndDelete(req.params.id)\n      await SubTask.deleteMany({ taskID: req.params.id })\n\n      if (!task) {\n         res.status(404).json()\n      } else {\n         res.json(task)\n      }\n   } catch (error) {\n      res.status(500).json({ message: error.message })\n   }\n}\n"]}