{"version":3,"file":"subtask.js","sourceRoot":"","sources":["../../controllers/subtask.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from 'express'\nimport SubTask from '../models/SubTask'\nimport Task from '../models/Task'\n\nexport const createSubTask = async (req: Request, res: Response) => {\n   const { description, completed, price } = req.body\n\n   const newSubTask = new SubTask({ description, completed, price, taskID: req.params.id })\n\n   try {\n      await Task.findByIdAndUpdate(req.params.id, { $push: { subTask: newSubTask } }, { new: true, runValidators: true })\n      await newSubTask.save()\n\n      res.status(201).json(newSubTask)\n   } catch (error) {\n      res.status(409).json({ message: error.message })\n   }\n}\n\nexport const getSubTasks = async (_req: Request, res: Response) => {\n   try {\n      const subtasks = await SubTask.find()\n\n      res.status(200).json(subtasks)\n   } catch (error) {\n      res.status(404).json({ message: error.message })\n   }\n}\n\nexport const updateSubTask = async (req: Request, res: Response) => {\n   const updates = Object.keys(req.body)\n   const allowUpdates = ['description', 'completed', 'price']\n   const isValidoperation = updates.every((update) => allowUpdates.includes(update))\n\n   if (!isValidoperation) {\n      res.status(400).json({ error: 'Invalid updates!' })\n   } else {\n      try {\n         const subtask = await SubTask.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true })\n\n         if (!subtask) {\n            res.status(404).json()\n         } else {\n            res.status(201).json(subtask)\n         }\n      } catch (error) {\n         res.status(400).json({ message: error.message })\n      }\n   }\n}\n\nexport const deleteSubTask = async (req: Request, res: Response) => {\n   try {\n      const subtask = await SubTask.findByIdAndDelete(req.params.id)\n\n      if (!subtask) {\n         res.status(404).json()\n      } else {\n         res.json(subtask)\n      }\n   } catch (error) {\n      res.status(500).json({ message: error.message })\n   }\n}\n"]}